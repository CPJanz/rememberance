{"version":3,"sources":["component/Card/index.js","component/Gameboard/index.js","component/Jumbotron/index.js","component/NavBar/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","children","Gameboard","cards","map","element","index","component_Card","key","Jumbotron","NavBar","gameStatus","currentScore","topScore","App","state","clickedArray","Array","fill","imageArray","handleCardClick","updatedClickedArray","_this","slice","setState","gameOver","Math","max","this","component_NavBar","component_Jumbotron","component_Gameboard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ab4be35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"clicky-card col-3\" onClick={props.onClick}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../Card\";\r\nimport \"./style.css\";\r\n\r\nfunction Gameboard(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        {props.cards.map((element, index) => {\r\n          return (\r\n            <Card key={index} onClick={() => props.onClick(index)}>\r\n              {element}\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Gameboard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron(props) {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-3\">Can you remember?</h1>\r\n        <p className=\"lead\">\r\n          Click on each icon only once. How many far can you get before making a\r\n          mistake?\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <nav className=\"navbar sticky-top navbar-dark bg-dark\">\r\n      <ul className=\"nav w-100\">\r\n        <li className=\"navbar-brand mr-auto\">REMEMBERANCE</li>\r\n\r\n        {props.gameStatus === \"Waiting\" ? (\r\n          <li className=\"navbar-brand mx-auto\">Pick A Card</li>\r\n        ) : props.gameStatus === \"Running\" ? (\r\n          <li className=\"navbar-brand mx-auto correct\">Correct Answer</li>\r\n        ) : props.gameStatus === \"Lost\" ? (\r\n          <li className=\"navbar-brand mx-auto incorrect\">Incorrect Answer</li>\r\n        ) : (\r\n          <li className=\"navbar-brand mx-auto correct\">You Win!</li>\r\n        )}\r\n\r\n        <li className=\"navbar-brand ml-auto\">\r\n          Score: {props.currentScore} | High Score {props.topScore}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Gameboard from \"./component/Gameboard\";\nimport Jumbotron from \"./component/Jumbotron\";\nimport NavBar from \"./component/NavBar\";\n\nclass App extends Component {\n  state = {\n    topScore: 0,\n    currentScore: 0,\n    gameStatus: \"Waiting\",\n    clickedArray: Array(12).fill(false),\n    imageArray: [\n      <i className=\"fas fa-apple-alt\" />,\n      <i className=\"fas fa-ambulance\" />,\n      <i className=\"fas fa-angry\" />,\n      <i className=\"fas fa-archway\" />,\n      <i className=\"fas fa-atlas\" />,\n      <i className=\"fas fa-bacon\" />,\n      <i className=\"fas fa-band-aid\" />,\n      <i className=\"fas fa-baby\" />,\n      <i className=\"fas fa-birthday-cake\" />,\n      <i className=\"fas fa-bowling-ball\" />,\n      <i className=\"fas fa-carrot\" />,\n      <i className=\"fas fa-chess-bishop\" />\n    ]\n  };\n\n  handleCardClick = index => {\n    const updatedClickedArray = this.state.clickedArray.slice(0);\n    //Check clicked card for previously being clicked.\n    if (updatedClickedArray[index]) {\n      this.setState({ gameStatus: \"Lost\" });\n      this.gameOver();\n    } else {\n      if (this.state.currentScore < 11) {\n        updatedClickedArray[index] = true;\n        this.setState({\n          currentScore: this.state.currentScore + 1,\n          topScore: Math.max(this.state.currentScore + 1, this.state.topScore),\n          clickedArray: updatedClickedArray,\n          gameStatus: \"Running\"\n        });\n      } else {\n        this.setState({\n          currentScore: this.state.currentScore + 1,\n          topScore: Math.max(this.state.currentScore + 1, this.state.topScore),\n          gameStatus: \"Won\"\n        });\n        this.gameOver();\n      }\n    }\n  };\n\n  gameOver() {\n    this.setState({\n      clickedArray: Array(12).fill(false),\n      currentScore: 0\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar\n          gameStatus={this.state.gameStatus}\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Jumbotron />\n        <Gameboard\n          onClick={this.handleCardClick}\n          cards={this.state.imageArray}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}